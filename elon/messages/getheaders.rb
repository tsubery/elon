class Elon
  class Getheaders
    ID="getheaders"
    attr_accessor :block_version, :headers, :stop_hash

    extend Encodable
    include Encodable

    EXAMPLE = "\x7f\x11\x01\x00\x1f\xf6\x3c\xe4" \
      "\xe4\xc8\x13\x0f\xf2\x63\xa6\x5b\x7f\xd0\x7a\xf6\x74\xdc\x35\x76" \
      "\x02\x7b\x4e\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4c\xab\x80" \
      "\xf9\x0b\x76\x4a\xb4\xdb\xfb\xc6\xab\xf4\x5e\x2a\x51\x07\xd3\xdd" \
      "\x18\xfb\x65\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc1\x15\x6f" \
      "\xc3\x3a\xe7\xc8\x0e\x3d\x41\xc1\x6b\x1b\x97\xc6\xae\x68\xf9\x83" \
      "\xc2\x42\xff\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x13\x3a\xd8" \
      "\x15\x1e\x46\x83\xaa\xd7\xd3\xd3\xfa\xb8\xe9\x99\x5e\x46\x2d\xd1" \
      "\xe2\xf7\x86\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x25\x89\xa3" \
      "\xe0\xed\x74\x23\xa8\x55\xdc\xcb\xb0\xa0\x13\xc7\x65\xba\x48\x50" \
      "\x07\x60\x84\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xb1\x46" \
      "\x89\xce\xc1\x4b\x52\x0a\xb3\xad\xdc\x80\xea\xc6\x3d\x9a\x18\xaa" \
      "\xe5\x21\x57\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8b\x4d\x87" \
      "\xab\xd3\x67\x45\x36\x61\x6e\xc1\x0c\x5a\x39\xcc\x15\xe3\x9e\xef" \
      "\x4c\x62\x4c\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4d\x59\x27" \
      "\x67\xe2\x2d\x13\xa8\x85\xa4\x49\xb7\x61\x04\x14\x7a\x66\xb1\x2b" \
      "\xfc\xd3\xe5\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x28\xeb\xdd" \
      "\x0b\xd1\x4b\xb1\x10\x2a\x18\xbf\x59\x84\xdf\x44\xa3\x43\x2a\x24" \
      "\x5e\xda\xbb\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x59\xed\x13" \
      "\xa7\x76\x95\x22\x65\x86\x8f\x80\x1a\xe7\xd8\x55\xe7\x8a\xbf\xb7" \
      "\xe0\x67\x1f\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\xae\x93\x7b" \
      "\xda\x55\x8d\xbb\xe3\x52\x67\x3a\x28\x35\x4c\x33\xb7\xa3\xd0\x80" \
      "\x2b\x28\x0d\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbc\x58\x70" \
      "\xd9\xe3\x1d\x25\xbe\x6f\x3b\x59\xd8\x97\x3a\x11\x82\x95\xe4\xce" \
      "\xa8\x51\x4e\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x93\x3f\xa9" \
      "\x1f\xef\xc5\xa3\xcc\xe4\x49\xa1\xf2\x88\x50\x72\x51\x51\x58\xd9" \
      "\xf9\x23\xa7\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x39\xc2\xce" \
      "\x6e\x72\x86\xf3\x14\x6b\xc7\xc5\xed\x03\x73\x96\x08\x9a\x27\x0d" \
      "\x70\x80\x3e\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x85\x6b" \
      "\x8f\x6f\x91\xc3\x23\x6a\x15\xc5\xb2\x19\xd8\x6d\xc3\x1b\xc1\x19" \
      "\x6c\x4a\x2b\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\x4b\x55" \
      "\x45\xd5\x58\xc7\x05\x31\x4d\xfc\xd6\xed\xc0\x26\xc6\x6b\x56\x75" \
      "\x8a\xb1\xe3\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa1\xca\x41" \
      "\x50\xaf\xce\x2d\x26\xe4\x28\xac\x0e\xe5\x3c\x9f\x8c\x79\x23\xc0" \
      "\xdb\xfc\xcf\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x63\x28\x01" \
      "\x06\x39\x44\xcf\x67\xb6\xa4\x79\x84\x6d\xa8\x8b\xf9\x97\xef\x07" \
      "\x72\xb0\xbb\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5e\x10\x20" \
      "\x51\x2d\xe8\x1f\x35\x06\xc9\x31\xd6\x3d\xfc\x9d\xd2\xd0\x2c\x33" \
      "\xdb\x16\x32\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x7e\xb6" \
      "\xe6\x9f\x9f\x57\xfe\x1c\xbb\x82\x19\x6e\xa7\xe9\xe0\x36\xc7\x9c" \
      "\x61\x67\x94\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\xf9\xcb" \
      "\xe0\x97\x71\x18\x66\x71\x0e\x3a\x1e\x7f\xd6\x22\x42\x73\x37\x0c" \
      "\x0b\xe9\x73\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9d\x5c\x0b" \
      "\xa0\x9e\xc4\xa9\xa2\x21\x01\x6b\x2d\xc9\xae\x98\x80\x60\x9d\x14" \
      "\xbb\xe1\x76\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe2\x99\x52" \
      "\x4c\x36\x95\x35\x34\x8f\x8b\x21\x56\xc4\x82\x7d\xe3\x9e\x6d\x2d" \
      "\x26\xa6\xbd\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x88\x12\x65" \
      "\x39\x7a\xd1\x76\x40\x57\x3e\xf4\x8f\x9a\x54\xbc\x59\x61\xd3\x96" \
      "\x48\xa0\x05\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\xbd\xf4" \
      "\x01\xc5\xd0\x86\x3b\xc8\xa6\x13\xda\xcb\x01\x4c\x37\xe3\x64\xb5" \
      "\x91\xef\x50\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x9c\x93\x63" \
      "\x3a\xb6\xf4\x69\x16\x83\x49\x1b\xdd\x8e\x2c\xd3\x83\x18\xe9\x12" \
      "\x4a\xa2\x71\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x8b\xd3\xc8" \
      "\xf2\x8c\x53\x61\x74\x1f\x10\x5f\x7f\xf3\x49\x08\xda\x20\x42\x7c" \
      "\xe2\x27\x54\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7b\xde\xcc" \
      "\x2a\xec\x05\x7a\xde\x6c\x54\x48\x56\x29\x35\x1d\x23\x0f\xd2\xe1" \
      "\xf2\x2a\xc8\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xb4\x33" \
      "\x55\x1e\x03\xc3\x94\xba\xc1\xa7\xa5\xe7\x47\x5a\x62\x66\x9d\x9e" \
      "\x68\x64\xfd\xa1\x01\x00\x00\x00\x00\x00\x00\x00\x00\xba\x32\x4d" \
      "\x75\x5b\xe0\x30\xb1\xf5\x44\xf1\xb8\xf6\xda\x15\xdb\x7a\xa7\x3e" \
      "\xd9\x12\xcd\x99\x1e\xf0\x0a\x00\x00\x00\x00\x00\x00\x6f\xe2\x8c" \
      "\x0a\xb6\xf1\xb3\x72\xc1\xa6\xa2\x46\xae\x63\xf7\x4f\x93\x1e\x83" \
      "\x65\xe1\x5a\x08\x9c\x68\xd6\x19\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
      "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

    def initialize(attrs = {})
    end

    def self.deserialize(str)
      new.tap do |message|
        message.block_version = str.unpack1("I<")
        str = slice(str, 4)
        count, str = decode_var_size(str)
        message.headers= (count + 1).times.map{|i| str[(i*32)..((i+1)*32-1)]}
      end
    end

    def serialize
      [
        [block_version].pack("I<"),
        encode_var_size(headers.count - 1),
        headers
      ].flatten.join('')
    end

    def self.example
      EXAMPLE.force_encoding(Encoding::ASCII_8BIT)
    end
  end
end
